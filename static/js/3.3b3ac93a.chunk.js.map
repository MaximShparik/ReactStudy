{"version":3,"sources":["components/dialogs/message/DialogsName.jsx","components/dialogs/message/Message.jsx","components/dialogs/message/CurrentDialog.jsx","components/dialogs/message/CurrentDialog-Container.jsx"],"names":["DialogsName","props","to","id","className","name","Message","from","src","Ava","alt","text","ReduxMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","rows","placeholder","isSending","disabled","CurrentDialog","dataRenderMessage","dataMessage","map","el","body","senderId","avasrc","dataRenderDialogsName","dataDialogsName","GetMessages","values","SendMessageThunkCreator","MyMessageText","CurrentDialogContainer","this","GetMessagesInitial","prevProps","prevState","snapshot","isFetching","Preloader","dataNewMessageText","SendMessage","React","Component","compose","connect","state","userId","AddMessage","GetMessagesThunkCreator","WithAuthRedirect"],"mappings":"mLAWeA,EAPK,SAACC,GAEnB,OACE,kBAAC,IAAD,CAASC,GAAI,YAAYD,EAAME,GAAIC,UAAU,iBAAiBH,EAAMI,O,iBCczDC,EAjBC,SAACL,GAIf,OACE,yBAAKG,UAAuB,MAAZH,EAAMM,KAAa,aAAe,iBAChD,yBAAKH,UAAU,mBACb,yBAAKI,IAAKC,IAAKC,IAAI,MAAMN,UAAU,iBACnC,0BAAMA,UAAU,iBAAiBH,EAAMM,OAEzC,yBAAKH,UAAU,iBACZH,EAAMU,Q,kCCmDTC,G,KAAmBC,YAAU,CACjCC,KAAK,WADkBD,EAhCL,SAACZ,GAQnB,OACE,0BAAMG,UAAU,mBAAmBW,SAAUd,EAAMe,cACjD,kBAACC,EAAA,EAAD,CACEC,UAAWC,IACXd,KAAK,gBACLD,UAAU,wBACVgB,KAAK,IACLC,YAAY,oBAGbpB,EAAMqB,UACL,4BAAQlB,UAAU,0BAA0BmB,UAAQ,GAApD,QAGC,4BACCnB,UAAU,2BADX,aAcMoB,EA7DO,SAACvB,GAErB,IAAIwB,EACFxB,EAAMyB,YAAYC,KAAK,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAASjB,KAAMiB,EAAGC,KAAMtB,KAAMqB,EAAGE,SAAUC,OAAQH,EAAGG,YACjFC,EACF/B,EAAMgC,gBAAgBN,KAAK,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAaM,YAAajC,EAAMiC,YAAa7B,KAAMuB,EAAGvB,KAAMF,GAAIyB,EAAGzB,QAOtG,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,oBACZqB,GAEH,yBAAKrB,UAAU,iBACZ4B,GAEH,kBAACpB,EAAD,CAAkBG,SAbF,SAACoB,GACnBlC,EAAMmC,wBAAwB,KAAKD,EAAOE,eAC1CF,EAAS,IAWoCb,UAAWrB,EAAMqB,c,wCCrB5DgB,E,kLAGFC,KAAKtC,MAAMuC,mBAAmB,Q,yCAEbC,EAAWC,EAAWC,GACpCJ,KAAKtC,MAAMyB,YAAce,EAAUf,c,+BAOtC,OAAO,oCACJa,KAAKtC,MAAM2C,WACV,kBAACC,EAAA,EAAD,MACC,KACH,kBAAC,EAAD,CACEC,mBAAoBP,KAAKtC,MAAM6C,mBAC/BpB,YAAaa,KAAKtC,MAAMyB,YACxBO,gBAAiBM,KAAKtC,MAAMgC,gBAC5Bc,YAAaR,KAAKtC,MAAM8C,YACxBX,wBAAyBG,KAAKtC,MAAMmC,wBACpCd,UAAWiB,KAAKtC,MAAMqB,iB,GAvBO0B,IAAMC,WAiD5BC,sBACbC,aApBmB,SAACC,GACpB,MAAO,CACLN,mBAAoBM,EAAM9C,QAAQwC,mBAClCpB,YAAa0B,EAAM9C,QAAQoB,YAC3BO,gBAAgBmB,EAAM9C,QAAQ2B,gBAC9BW,WAAWQ,EAAM9C,QAAQsC,WACzBtB,UAAU8B,EAAM9C,QAAQgB,UACxB+B,OAAO,QAcP,CAACC,eAAWC,4BAAwBf,uBAAmBJ,8BACzDoB,IAHaN,CAIbZ","file":"static/js/3.3b3ac93a.chunk.js","sourcesContent":["import React from 'react';\nimport '../../.././App.css';\nimport {NavLink} from 'react-router-dom'\n\nconst DialogsName = (props) => {\n  // debugger\n  return (\n    <NavLink to={'/dialogs/'+props.id} className='dialogs__item'>{props.name}</NavLink>\n  );\n}\n\nexport default DialogsName;\n","import React from 'react';\nimport '../../.././App.css';\nimport Ava from '../../../img/ava.jpg'\n\nconst Message = (props) => {\n// debugger\n\n\n  return (\n    <div className={props.from==8775 ? 'message me' : 'message no_me'}>\n      <div className='message__person'>\n        <img src={Ava} alt=\"ava\" className='message__ava'/>\n        <span className='message__name'>{props.from}</span>\n      </div>\n      <div className='message__area'>\n        {props.text}\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from 'react';\nimport '../../.././App.css';\nimport DialogsName from './DialogsName'\nimport Message from './Message';\nimport {reduxForm,Field} from 'redux-form'\nimport {requiredField,maxLenghtCreator} from '../../../utilits/validators/validators'\nimport {Textarea} from '../../common/formsControler/FormsControler'\nimport {SendMessagegApi} from '../../../api/api'\n\nconst CurrentDialog = (props) => {\n// debugger\n  let dataRenderMessage =\n    props.dataMessage.map( el => <Message text={el.body} from={el.senderId} avasrc={el.avasrc}/>)\n  let dataRenderDialogsName =\n    props.dataDialogsName.map( el => <DialogsName GetMessages={props.GetMessages} name={el.name} id={el.id}/>)\n\n  let AddNewMessage = (values) => {\n    props.SendMessageThunkCreator(7099,values.MyMessageText);\n    values = ''\n  }\n\n  return (\n    <div className='dialogs'>\n      <div className='dialogs__current'>\n        {dataRenderMessage}\n      </div>\n      <div className='dialogs__list'>\n        {dataRenderDialogsName}\n      </div>\n      <ReduxMessageForm onSubmit={AddNewMessage} isSending={props.isSending}/>\n    </div>\n  );\n}\n\nconst MessageForm = (props) => {\n  // debugger\n  // const send=()=>{\n  //   let body = document.getElementByClass(\"dialogs__message-area\").value;\n  //   SendMessagegApi(8775,body);\n  //   alert(body)\n  // }\n\n  return (\n    <form className='dialogs__message' onSubmit={props.handleSubmit}>\n      <Field\n        component={Textarea}\n        name='MyMessageText'\n        className='dialogs__message-area'\n        rows=\"2\"\n        placeholder=\"Your message...\"\n        >\n      </Field>\n      {props.isSending?\n        <button className='dialogs__message-button' disabled>\n          Send\n        </button>\n        :<button\n          className='dialogs__message-button'\n          >\n          Send\n        </button>\n      }\n    </form>\n  )\n}\n\nconst ReduxMessageForm = reduxForm({\n  form:'message'\n})(MessageForm)\n\nexport default CurrentDialog;\n","import React from 'react';\nimport CurrentDialog from './CurrentDialog'\nimport {AddMessage,GetMessagesThunkCreator,GetMessagesInitial,SendMessageThunkCreator} from '../../.././redux/message-reducer';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux'\nimport {WithAuthRedirect} from '../../../hoc/WithAuthRedirect'\nimport Preloader from '../../common/preloader/Preloader'\n\nclass CurrentDialogContainer extends React.Component{\n\n  componentDidMount() {\n    this.props.GetMessagesInitial(7099)\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(this.props.dataMessage!==prevProps.dataMessage){\n      // this.props.GetMessagesThunkCreator(8775)\n    }\n  }\n\n  render() {\n    // debugger\n    return <>\n      {this.props.isFetching?\n        <Preloader/>\n        :null}\n      <CurrentDialog\n        dataNewMessageText={this.props.dataNewMessageText}\n        dataMessage={this.props.dataMessage}\n        dataDialogsName={this.props.dataDialogsName}\n        SendMessage={this.props.SendMessage}\n        SendMessageThunkCreator={this.props.SendMessageThunkCreator}\n        isSending={this.props.isSending}\n        // GetMessages={this.props.GetMessages}\n      />\n    </>\n  }\n}\n\nlet mapStateToProps =(state)=>{\n  return {\n    dataNewMessageText: state.Message.dataNewMessageText,\n    dataMessage: state.Message.dataMessage,\n    dataDialogsName:state.Message.dataDialogsName,\n    isFetching:state.Message.isFetching,\n    isSending:state.Message.isSending,\n    userId:7099,\n  }\n}\n// можно настроить селокторы для каждого пропса\n// но нах это нужно не знаю\n// он говорит нужно, для примера 2 сделал\n\n// сюда можно воткнуть dataUsersSuperSelector(state)\n// и передать туда что-то\n// она не будет постояно вызываться и грузить процессор\n// а зупуститься только когда нужно\n\nexport default compose(\n  connect(mapStateToProps,\n    {AddMessage,GetMessagesThunkCreator,GetMessagesInitial,SendMessageThunkCreator}),\n  WithAuthRedirect\n)(CurrentDialogContainer)\n"],"sourceRoot":""}